# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_unittest",
)
load("@drake//tools/install:install.bzl", "install")
load("@drake//tools/install:install_data.bzl", "install_data")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_test",
)

package(
    default_visibility = [":__subpackages__"],
)

drake_cc_library(
    name = "yaskawa_common",
    srcs = [
        "yaskawa_common.cc",
    ],
    hdrs = [
        "yaskawa_common.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//attic/multibody:rigid_body_tree",
        "//attic/multibody/parsers",
        "//common:find_resource",
        "//common/trajectories:piecewise_polynomial",
        "//manipulation/yaskawa:yaskawa_constants",
        "@lcmtypes_bot2_core",
        "@lcmtypes_robotlocomotion",
    ],
)

drake_cc_library(
    name = "yaskawa_lcm",
    srcs = ["yaskawa_lcm.cc"],
    hdrs = ["yaskawa_lcm.h"],
    # TODO(hongkai.dai): move this package to manipulation folder.
    visibility = ["//visibility:public"],
    deps = [
        ":yaskawa_common",
        "//attic/multibody:inverse_kinematics",
        "//attic/multibody:rigid_body_tree",
        "//attic/multibody/rigid_body_plant:contact_results",
        "//common/trajectories:piecewise_polynomial",
        "//lcmtypes:iiwa",
        "//manipulation/yaskawa",
        "//systems/framework:leaf_system",
        "//systems/lcm:lcm_pubsub_system",
    ],
)

# drake_cc_library(
#     name = "oracular_state_estimator",
#     srcs = ["oracular_state_estimator.cc"],
#     hdrs = ["oracular_state_estimator.h"],
#     visibility = ["//visibility:public"],
#     deps = [
#         "//attic/manipulation/util:robot_state_msg_translator",
#         "//systems/framework:leaf_system",
#         "@lcmtypes_bot2_core",
#     ],
# )

# drake_cc_library(
#     name = "lcm_plan_interpolator",
#     srcs = ["lcm_plan_interpolator.cc"],
#     hdrs = [
#         "lcm_plan_interpolator.h",
#     ],
#     # TODO(hongkai.dai): move this package to manipulation folder.
#     visibility = ["//visibility:public"],
#     deps = [
#         ":iiwa_common",
#         ":iiwa_lcm",
#         "//manipulation/planner:robot_plan_interpolator",
#         "//systems/framework:diagram_builder",
#         "//systems/primitives:demultiplexer",
#     ],
# )

# drake_cc_library(
#     name = "kuka_torque_controller",
#     srcs = ["kuka_torque_controller.cc"],
#     hdrs = ["kuka_torque_controller.h"],
#     visibility = ["//visibility:public"],
#     deps = [
#         "//attic/multibody:rigid_body_tree",
#         "//attic/systems/controllers:rbt_inverse_dynamics",
#         "//systems/controllers:pid_controller",
#         "//systems/controllers:state_feedback_controller_interface",
#         "//systems/framework:diagram_builder",
#         "//systems/framework:leaf_system",
#         "//systems/primitives:adder",
#         "//systems/primitives:pass_through",

#         "//systems/primitives:signal_logger",
#         "//systems/primitives:constant_vector_source",

#     ],
# )

# drake_cc_binary(
#     name = "iiwa_controller",
#     srcs = ["iiwa_controller.cc"],
#     data = [
#         ":models",
#         "//manipulation/models/iiwa_description:models",
#     ],
#     deps = [
#         ":iiwa_common",
#         ":lcm_plan_interpolator",
#         "//common:text_logging_gflags",
#         "//lcm:drake_lcm",
#         "//systems/analysis:simulator",
#     ],
# )

# drake_cc_binary(
#     name = "iiwa_wsg_simulation",
#     srcs = ["iiwa_wsg_simulation.cc"],
#     add_test_rule = 1,
#     data = [
#         ":models",
#         "//manipulation/models/iiwa_description:models",
#         "//manipulation/models/wsg_50_description:models",
#     ],
#     # TODO(kyle.edwards@kitware.com): Re-enable this test when it no longer
#     # causes timeouts in kcov.
#     tags = ["no_kcov"],
#     test_rule_args = ["--simulation_sec=0.01"],
#     deps = [
#         ":iiwa_common",
#         ":iiwa_lcm",
#         ":oracular_state_estimator",
#         "//common:text_logging_gflags",
#         "//examples/kuka_iiwa_arm/iiwa_world:iiwa_wsg_diagram_factory",
#         "//lcm",
#         "//manipulation/schunk_wsg",
#         "//systems/analysis",
#         "//systems/primitives:constant_vector_source",
#         "//systems/primitives:demultiplexer",
#         "//systems/primitives:discrete_derivative",
#     ],
# )

# drake_cc_binary(
#     name = "kuka_simulation",
#     srcs = ["kuka_simulation.cc"],
#     add_test_rule = 1,
#     data = [
#         ":models",
#         "//manipulation/models/iiwa_description:models",
#         "//manipulation/models/wsg_50_description:models",
#     ],
#     # TODO(kyle.edwards@kitware.com): Re-enable this test when it no longer
#     # causes timeouts in kcov.
#     tags = ["no_kcov"],
#     test_rule_args = ["--simulation_sec=0.1 --target_realtime_rate=0.0"],
#     deps = [
#         ":yaskawa_common",
#         ":yaskawa_lcm",
#         ":kuka_torque_controller",
#         "//attic/manipulation/util:sim_diagram_builder",
#         "//attic/multibody:rigid_body_tree_construction",
#         "//attic/multibody/rigid_body_plant:frame_visualizer",
#         "//attic/systems/controllers:rbt_inverse_dynamics_controller",
#         "//common:text_logging_gflags",
#         "//lcm",
#         "//systems/analysis",
#         "//systems/controllers:state_feedback_controller_interface",
#         "//systems/primitives:constant_vector_source",
#         "//systems/primitives:demultiplexer",
#         "//systems/primitives:discrete_derivative",

#         "//systems/primitives:signal_logger",
#         "//examples/kuka_iiwa_arm/iiwa_world:iiwa_wsg_diagram_factory",
#         "//manipulation/schunk_wsg",


#     ],
# )

drake_cc_library(
    name = "primitive_executor",
    srcs = [
        "primitive_executor.cc",
    ],
    hdrs = [
        "primitive_executor.h",
    ],
    data = [
        "//manipulation/models/yaskawa_description:models",
        "//manipulation/models/yaskawa_end_effector_description:models",
        "//manipulation/models/conveyor_belt_description:models",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//examples/yaskawa_arm:yaskawa_common",
        "//attic/manipulation/planner:constraint_relaxing_ik",
        "//attic/multibody/parsers",
        "//lcmtypes:iiwa",
        "//manipulation/yaskawa_conveyor_belt_dof1:conveyor_belt_dof1_constants",
        "//manipulation/yaskawa_conveyor_belt_dof1:new_belt_position_controller",
        "//manipulation/yaskawa_conveyor_belt_dof1:conveyor_belt_dof1_lcm",
        "//multibody/parsing",
        "//multibody/plant",
        "@gflags",
        "//lcm",
        "@lcmtypes_bot2_core",
        "@lcmtypes_robotlocomotion",
        # "//DDP:run_ddp_library",
    ],
)

drake_cc_binary(
    name = "primitive_runner",
    srcs = ["primitive_runner.cc"],
    deps = [
        "//examples/yaskawa_arm:primitive_executor",
        "//examples/kuka_iiwa_arm:lcm_plan_interpolator",
        "//lcm:drake_lcm",
        "//systems/analysis:simulator",
        "@gflags",

    ],
)

drake_cc_binary(
    name = "yaskawa_plan_runner",
    srcs = ["yaskawa_plan_runner.cc"],
    data = [
        ":models",
        "//manipulation/models/yaskawa_description:models",
    ],
    deps = [
        ":yaskawa_common",
        ":yaskawa_lcm",
        "@lcmtypes_bot2_core",
        "@lcmtypes_robotlocomotion",
    ],
)


drake_cc_binary(
    name = "move_yaskawa_ee",
    srcs = ["move_yaskawa_ee.cc"],
    data = [
        ":models",
        "//manipulation/models/yaskawa_description:models",
    ],
    deps = [
        ":yaskawa_common",
        "//attic/manipulation/planner:constraint_relaxing_ik",
        "//attic/multibody/parsers",
        "//common:text_logging_gflags",
        "//lcmtypes:iiwa",
        "//math:geometric_transform",
        "@lcm",
        "@lcmtypes_bot2_core",
        "@lcmtypes_robotlocomotion",
    ],
)

alias(
    name = "models",
    actual = "//examples/yaskawa_arm/models:models",
    visibility = ["//visibility:public"],
)

install(
    name = "install_data",
    visibility = ["//visibility:public"],
    deps = [
        "//examples/yaskawa_arm/models:install_data",
    ],
)



